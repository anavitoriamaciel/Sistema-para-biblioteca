from datetime import datetime
from typing import Dict, List, Set


class Livro:

    def __init__(self, codigo: int, titulo: str, autor: str, quantidade: int):
        self.codigo = codigo
        self.titulo = titulo
        self.autor = autor  # Novo atributo para autor
        self.quantidade = quantidade
        self.disponivel = quantidade

    def emprestar(self):
        if self.disponivel > 0:
            self.disponivel -= 1
            return True
        return False

    def devolver(self):
        if self.disponivel < self.quantidade:
            self.disponivel += 1
            return True
        return False


class Usuario:

    def __init__(self, id_usuario: int, nome: str, endereco: str):
        self.id_usuario = id_usuario
        self.nome = nome
        self.endereco = endereco
        self.emprestimos_atuais: List['Emprestimo'] = []
        self.historico_leitura: Set[int] = set()

    def adicionar_historico(self, codigo_livro: int):
        self.historico_leitura.add(codigo_livro)

    def exibir_historico(self):
        return self.historico_leitura


class Emprestimo:

    def __init__(self,
                 livro: Livro,
                 data_emprestimo: datetime,
                 data_devolucao: datetime = None):
        self.livro = livro
        self.data_emprestimo = data_emprestimo
        self.data_devolucao = data_devolucao


class Biblioteca:

    def __init__(self):
        self.livros_por_codigo: Dict[int, Livro] = {}
        self.livros_por_titulo: Dict[str, Livro] = {}
        self.usuarios: Dict[int, Usuario] = {}

    def adicionar_livro(self, codigo: int, titulo: str, autor: str,
                        quantidade: int):
        if codigo in self.livros_por_codigo:
            print("Livro com este código já existe.")
            return
        livro = Livro(codigo, titulo, autor, quantidade)
        self.livros_por_codigo[codigo] = livro
        self.livros_por_titulo[titulo.lower()] = livro
        print(f"Livro '{titulo}' de {autor} adicionado com sucesso!")

    def adicionar_usuario(self, id_usuario: int, nome: str, endereco: str):
        if id_usuario in self.usuarios:
            print("Usuário com este ID já existe.")
            return
        usuario = Usuario(id_usuario, nome, endereco)
        self.usuarios[id_usuario] = usuario
        print(f"Usuário '{nome}' adicionado com sucesso!")

    def emprestar_livro(self, id_usuario: int, codigo_livro: int):
        usuario = self.usuarios.get(id_usuario)
        livro = self.livros_por_codigo.get(codigo_livro)

        if not usuario:
            print("Usuário não encontrado.")
            return False
        if not livro:
            print("Livro não encontrado.")
            return False
        if len(usuario.emprestimos_atuais) >= 3:
            print("Usuário já possui 3 livros emprestados.")
            return False
        if not livro.emprestar():
            print("Livro indisponível para empréstimo.")
            return False

        emprestimo = Emprestimo(livro, datetime.now())
        usuario.emprestimos_atuais.append(emprestimo)
        usuario.adicionar_historico(codigo_livro)
        print(
            f"Livro '{livro.titulo}' de {livro.autor} emprestado com sucesso para {usuario.nome}."
        )
        return True

    def devolver_livro(self, id_usuario: int, codigo_livro: int):
        usuario = self.usuarios.get(id_usuario)

        if not usuario:
            print("Usuário não encontrado.")
            return False

        emprestimo = next((e for e in usuario.emprestimos_atuais
                           if e.livro.codigo == codigo_livro), None)
        if not emprestimo:
            print("Empréstimo não encontrado para o livro especificado.")
            return False

        emprestimo.livro.devolver()
        emprestimo.data_devolucao = datetime.now()
        usuario.emprestimos_atuais.remove(emprestimo)
        print(
            f"Livro '{emprestimo.livro.titulo}' de {emprestimo.livro.autor} devolvido com sucesso."
        )
        return True

    def exibir_livros_disponiveis(self):
        print("Livros disponíveis:")
        for livro in self.livros_por_codigo.values():
            print(
                f"'{livro.titulo}' de {livro.autor} (Código: {livro.codigo}) - Disponíveis: {livro.disponivel}/{livro.quantidade}"
            )

    def exibir_historico_usuario(self, id_usuario: int):
        usuario = self.usuarios.get(id_usuario)
        if not usuario:
            print("Usuário não encontrado.")
            return

        print(f"Histórico de leitura de {usuario.nome}:")
        for codigo_livro in usuario.historico_leitura:
            livro = self.livros_por_codigo.get(codigo_livro)
            if livro:
                print(f"- {livro.titulo} de {livro.autor}")

    def consultar_livro(self, identificador: str):
        # Tenta buscar pelo código
        try:
            codigo = int(identificador)
            livro = self.livros_por_codigo.get(codigo)
            if livro:
                print(
                    f"Livro encontrado: '{livro.titulo}' de {livro.autor} - Disponíveis: {livro.disponivel}/{livro.quantidade}"
                )
                return
        except ValueError:
            pass  # Se não for um número, tentamos pelo título

        #Tenta buscar pelo título
        livro = self.livros_por_titulo.get(identificador.lower())
        if livro:
            print(
                f"Livro encontrado: '{livro.titulo}' de {livro.autor} - Disponíveis: {livro.disponivel}/{livro.quantidade}"
            )
        else:
            print("Livro não encontrado.")


# Menu interativo
def menu():
    biblioteca = Biblioteca()

    # Solicita a adição de um usuário antes de exibir o menu
    print("Bem-vindo ao sistema de gerenciamento de biblioteca!")
    print("Por favor, adicione um usuário ao sistema para iniciar.")

    while True:
        try:
            id_usuario = int(input("ID do usuário: "))
            nome = input("Nome do usuário: ")
            endereco = input("Endereço do usuário: ")
            biblioteca.adicionar_usuario(id_usuario, nome, endereco)
            break  # Sai do loop se o usuário foi adicionado com sucesso
        except ValueError:
            print("Por favor, insira um número válido para o ID do usuário.")

    # Pergunta se deseja exibir o menu após o cadastro do primeiro usuário
    while True:
        ver_menu = input(
            "\nUsuário adicionado! Deseja ver o menu de opções? (s/n): "
        ).strip().lower()
        if ver_menu == 's':
            break
        elif ver_menu == 'n':
            print("Saindo do sistema...")
            return
        else:
            print("Opção inválida. Por favor, digite 's' ou 'n'.")

    # Exibição do menu após confirmação
    while True:
        print("\nMenu de Opções:")
        print("1. Adicionar Livro")
        print("2. Adicionar Usuário")
        print("3. Emprestar Livro")
        print("4. Devolver Livro")
        print("5. Exibir Livros Disponíveis")
        print("6. Exibir Histórico de Leitura de um Usuário")
        print("7. Consultar Livro por Título ou Código")
        print("0. Sair")

        opcao = input("Escolha uma opção: ")
        if opcao == '1':
            try:
                codigo = int(input("Código do livro: "))
                titulo = input("Título do livro: ")
                autor = input(
                    "Autor do livro: ")  # Pergunta pelo autor do livro
                quantidade = int(input("Quantidade de exemplares: "))
                biblioteca.adicionar_livro(codigo, titulo, autor, quantidade)
            except ValueError:
                print(
                    "Por favor, insira um número válido para o código e quantidade."
                )

        elif opcao == '2':
            try:
                id_usuario = int(input("ID do usuário: "))
                nome = input("Nome do usuário: ")
                endereco = input("Endereço do usuário: ")
                biblioteca.adicionar_usuario(id_usuario, nome, endereco)
            except ValueError:
                print(
                    "Por favor, insira um número válido para o ID do usuário.")

        elif opcao == '3':
            try:
                id_usuario = int(input("ID do usuário: "))
                codigo_livro = int(input("Código do livro: "))
                biblioteca.emprestar_livro(id_usuario, codigo_livro)
            except ValueError:
                print(
                    "Por favor, insira um número válido para o ID do usuário e o código do livro."
                )

        elif opcao == '4':
            try:
                id_usuario = int(input("ID do usuário: "))
                codigo_livro = int(input("Código do livro: "))
                biblioteca.devolver_livro(id_usuario, codigo_livro)
            except ValueError:
                print(
                    "Por favor, insira um número válido para o ID do usuário e o código do livro."
                )

        elif opcao == '5':
            biblioteca.exibir_livros_disponiveis()

        elif opcao == '6':
            try:
                id_usuario = int(input("ID do usuário: "))
                biblioteca.exibir_historico_usuario(id_usuario)
            except ValueError:
                print(
                    "Por favor, insira um número válido para o ID do usuário.")

        elif opcao == '7':
            identificador = input("Digite o título ou código do livro: ")
            biblioteca.consultar_livro(identificador)

        elif opcao == '0':
            print("Saindo do sistema...")
            break  # Encerra o loop e sai do menu

        else:
            print("Opção inválida. Por favor, escolha uma opção válida.")


if __name__ == "__main__":
    menu()
